/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { ThreeElements } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    ['lamp-road-double_1']: THREE.Mesh;
    ['lamp-road-double_2']: THREE.Mesh;
    ['lamp-road-double_3']: THREE.Mesh;
    ['lamp-road_1']: THREE.Mesh;
    ['lamp-road_2']: THREE.Mesh;
    ['lamp-road_3']: THREE.Mesh;
    ['street-lamp_1']: THREE.Mesh;
    ['street-lamp_2']: THREE.Mesh;
  };
  materials: {
    GREY: THREE.MeshPhysicalMaterial;
    Street_Lights: THREE.MeshStandardMaterial;
    ['GREY LIGHT']: THREE.MeshPhysicalMaterial;
    ['20 GREY']: THREE.MeshPhysicalMaterial;
  };
};

type StreetLightProps = ThreeElements['group'] & {
  position?: [number, number, number];
  rotation?: [number, number, number];
  scale?: [number, number, number];
};

export function DoubleStreetLight({
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = [1, 1, 1],
  ...props
}: StreetLightProps) {
  const { nodes, materials } = useGLTF('/models/StreetLights.glb') as GLTFResult;
  return (
    <group position={position} rotation={rotation} scale={scale} {...props} dispose={null}>
      <mesh
        name="lamp-road-double_1"
        castShadow
        receiveShadow
        geometry={nodes['lamp-road-double_1'].geometry}
        material={materials.GREY}
      />
      <mesh
        name="lamp-road-double_2"
        castShadow
        receiveShadow
        geometry={nodes['lamp-road-double_2'].geometry}
        material={materials.Street_Lights}
      />
      <mesh
        name="lamp-road-double_3"
        castShadow
        receiveShadow
        geometry={nodes['lamp-road-double_3'].geometry}
        material={materials['GREY LIGHT']}
      />
    </group>
  );
}

export function SingleStreetLight({
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = [1, 1, 1],
  ...props
}: StreetLightProps) {
  const { nodes, materials } = useGLTF('/models/StreetLights.glb') as GLTFResult;
  return (
    <group position={position} rotation={rotation} scale={scale} {...props} dispose={null}>
      <mesh
        name="lamp-road_1"
        castShadow
        receiveShadow
        geometry={nodes['lamp-road_1'].geometry}
        material={materials['20 GREY']}
      />
      <mesh
        name="lamp-road_2"
        castShadow
        receiveShadow
        geometry={nodes['lamp-road_2'].geometry}
        material={materials.Street_Lights}
      />
      <mesh
        name="lamp-road_3"
        castShadow
        receiveShadow
        geometry={nodes['lamp-road_3'].geometry}
        material={materials['GREY LIGHT']}
      />
    </group>
  );
}

export function ClassicStreetLight({
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = [1, 1, 1],
  ...props
}: StreetLightProps) {
  const { nodes, materials } = useGLTF('/models/StreetLights.glb') as GLTFResult;
  return (
    <group position={position} rotation={rotation} scale={scale} {...props} dispose={null}>
      <mesh
        name="street-lamp_1"
        castShadow
        receiveShadow
        geometry={nodes['street-lamp_1'].geometry}
        material={materials.GREY}
      />
      <mesh
        name="street-lamp_2"
        castShadow
        receiveShadow
        geometry={nodes['street-lamp_2'].geometry}
        material={materials.Street_Lights}
      />
    </group>
  );
}

// Example usage component
export function StreetLights(props: ThreeElements['group']) {
  return (
    <group {...props}>
      <DoubleStreetLight position={[0, 0, 0]} />
      <SingleStreetLight position={[7.03, 0, 0]} />
      <ClassicStreetLight position={[-6.025, 0, 0]} rotation={[0, 1.571, 0]} />
    </group>
  );
}

useGLTF.preload('/models/StreetLights.glb');
