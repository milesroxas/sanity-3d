/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useEffect, useMemo, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    ["mesh-marker"]: THREE.Mesh;
  };
  materials: {
    ["marker-material"]: THREE.MeshStandardMaterial;
  };
};

interface MarkerProps {
  opacity?: number;
  isHovered?: boolean;
}

export function Marker({ opacity = 1, isHovered = false }: MarkerProps) {
  const { nodes, materials } = useGLTF("/models/marker.glb") as GLTFResult;
  const emissiveRef = useRef(0);

  const material = useMemo(() => {
    const mat = materials["marker-material"].clone();
    mat.transparent = true;
    mat.opacity = opacity;
    mat.color.setStyle("#36A837");
    return mat;
  }, [materials, opacity]);

  useFrame((_, delta) => {
    emissiveRef.current = THREE.MathUtils.lerp(
      emissiveRef.current,
      isHovered ? 1 : 0,
      delta * 5
    );

    material.color.setStyle(isHovered ? "#4AD849" : "#36A837");
    material.emissive.setStyle("#36A837");
    material.emissiveIntensity = emissiveRef.current;
    material.needsUpdate = true;
  });

  return (
    <group dispose={null}>
      <mesh
        name="mesh-marker"
        geometry={nodes["mesh-marker"].geometry}
        material={material}
        scale={0.668}
      />
    </group>
  );
}

useGLTF.preload("/models/marker.glb");
