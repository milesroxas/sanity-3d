/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    ["mesh-marker"]: THREE.Mesh;
  };
  materials: {
    ["marker-material"]: THREE.MeshStandardMaterial;
  };
};

interface MarkerProps {
  opacity?: number;
}

export function Marker({ opacity = 1 }: MarkerProps) {
  const { nodes, materials } = useGLTF("/models/marker.glb") as GLTFResult;
  const materialRef = useRef(materials["marker-material"]);

  useEffect(() => {
    if (materialRef.current) {
      materialRef.current.transparent = true;
      materialRef.current.opacity = opacity;
      materialRef.current.needsUpdate = true;
    }
  }, [opacity]);

  return (
    <group dispose={null}>
      <mesh
        name="mesh-marker"
        geometry={nodes["mesh-marker"].geometry}
        material={materialRef.current}
        scale={0.668}
      />
    </group>
  );
}

useGLTF.preload("/models/marker.glb");
