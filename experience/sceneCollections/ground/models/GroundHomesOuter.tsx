/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import type * as THREE from "three";
import type { GLTF } from "three-stdlib";
import { useGLTF } from "@react-three/drei";
import { ThreeElements } from "@react-three/fiber";
type GLTFResult = GLTF & {
  nodes: {
    ["tile-mainroad-straight-crosswalk-nb001"]: THREE.Mesh;
    ["tile-mainroad-straight-crosswalk-nb001_1"]: THREE.Mesh;
    ["tile-mainroad-straight-crosswalk-nb001_2"]: THREE.Mesh;
    ["tile-mainroad-straight-crosswalk-nb001_3"]: THREE.Mesh;
    ["tile-mainroad-straight-crosswalk-nb001_4"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-t-nb001"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-t-nb001_1"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-t-nb001_2"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-t-nb001_3"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-t-nb001_4"]: THREE.Mesh;
    ["tile-road-end-nb003"]: THREE.Mesh;
    ["tile-road-end-nb003_1"]: THREE.Mesh;
    ["tile-road-end-nb003_2"]: THREE.Mesh;
    ["tile-road-curve-nb001"]: THREE.Mesh;
    ["tile-road-curve-nb001_1"]: THREE.Mesh;
    ["tile-road-curve-nb001_2"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-nb001"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-nb001_1"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-nb001_2"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-nb001_3"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-nb001_4"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-t-nb005"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-t-nb005_1"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-t-nb005_2"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-t-nb005_3"]: THREE.Mesh;
    ["tile-road-mainroad-intersection-t-nb005_4"]: THREE.Mesh;
  };
  materials: {
    ["18 GREY-DARK"]: THREE.MeshPhysicalMaterial;
    ["21 GREY LIGHT"]: THREE.MeshPhysicalMaterial;
    ["23 GREY-WHITE"]: THREE.MeshPhysicalMaterial;
    ["30 YELLOW"]: THREE.MeshPhysicalMaterial;
    ["14 BROWN-LIGHTEST"]: THREE.MeshPhysicalMaterial;
  };
};

export function GroundHomesOuter(props: ThreeElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/models/road-zone-homes-outer.glb"
  ) as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group position={[0, 2.667, 75]} rotation={[0, Math.PI / 2, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-mainroad-straight-crosswalk-nb001"].geometry}
          material={materials["18 GREY-DARK"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-mainroad-straight-crosswalk-nb001_1"].geometry}
          material={materials["21 GREY LIGHT"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-mainroad-straight-crosswalk-nb001_2"].geometry}
          material={materials["23 GREY-WHITE"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-mainroad-straight-crosswalk-nb001_3"].geometry}
          material={materials["30 YELLOW"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-mainroad-straight-crosswalk-nb001_4"].geometry}
          material={materials["14 BROWN-LIGHTEST"]}
        />
      </group>
      <group position={[-30, 2.667, 75]} rotation={[0, Math.PI / 2, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-t-nb001"].geometry}
          material={materials["18 GREY-DARK"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-t-nb001_1"].geometry}
          material={materials["21 GREY LIGHT"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-t-nb001_2"].geometry}
          material={materials["23 GREY-WHITE"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-t-nb001_3"].geometry}
          material={materials["30 YELLOW"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-t-nb001_4"].geometry}
          material={materials["14 BROWN-LIGHTEST"]}
        />
      </group>
      <group position={[-30, 2.667, 135]} rotation={[Math.PI, 0, Math.PI]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-end-nb003"].geometry}
          material={materials["18 GREY-DARK"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-end-nb003_1"].geometry}
          material={materials["21 GREY LIGHT"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-end-nb003_2"].geometry}
          material={materials["14 BROWN-LIGHTEST"]}
        />
      </group>
      <group position={[30, 2.667, 105]} rotation={[0, 1.571, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-curve-nb001"].geometry}
          material={materials["21 GREY LIGHT"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-curve-nb001_1"].geometry}
          material={materials["18 GREY-DARK"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-curve-nb001_2"].geometry}
          material={materials["14 BROWN-LIGHTEST"]}
        />
      </group>
      <group position={[30, 2.667, 75]} rotation={[0, Math.PI / 2, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-nb001"].geometry}
          material={materials["18 GREY-DARK"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-nb001_1"].geometry}
          material={materials["21 GREY LIGHT"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-nb001_2"].geometry}
          material={materials["23 GREY-WHITE"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-nb001_3"].geometry}
          material={materials["30 YELLOW"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-nb001_4"].geometry}
          material={materials["14 BROWN-LIGHTEST"]}
        />
      </group>
      <group position={[-60, 2.667, 75]} rotation={[0, -Math.PI / 2, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-t-nb005"].geometry}
          material={materials["18 GREY-DARK"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-t-nb005_1"].geometry}
          material={materials["21 GREY LIGHT"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-t-nb005_2"].geometry}
          material={materials["23 GREY-WHITE"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-t-nb005_3"].geometry}
          material={materials["30 YELLOW"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["tile-road-mainroad-intersection-t-nb005_4"].geometry}
          material={materials["14 BROWN-LIGHTEST"]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/road-zone-homes-outer.glb");
