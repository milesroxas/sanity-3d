/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { ThreeElements, useFrame } from '@react-three/fiber'
import { MathUtils } from 'three'

type GLTFResult = GLTF & {
  nodes: {
    ['crane-tower-base_1']: THREE.Mesh
    ['crane-tower-base_2']: THREE.Mesh
    ['crane-tower-base_3']: THREE.Mesh
    ['crane-tower-hook_1']: THREE.Mesh
    ['crane-tower-hook_2']: THREE.Mesh
    ['crane-tower-slider']: THREE.Mesh
    ['crane-tower-top_1']: THREE.Mesh
    ['crane-tower-top_2']: THREE.Mesh
    ['crane-tower-top_3']: THREE.Mesh
    ['crane-tower-top_4']: THREE.Mesh
  }
  materials: {
    ['17 GREY-DARKEST.009']: THREE.MeshPhysicalMaterial
    ['20 GREY.002']: THREE.MeshPhysicalMaterial
    ['29 ORANGE-LIGHT']: THREE.MeshPhysicalMaterial
    ['20 GREY.002']: THREE.MeshPhysicalMaterial
    ['29 ORANGE-LIGHT']: THREE.MeshPhysicalMaterial
    ['17 GREY-DARKEST.009']: THREE.MeshPhysicalMaterial
    ['21 GREY LIGHT.001']: THREE.MeshPhysicalMaterial
    ['64 GLASS.002']: THREE.MeshPhysicalMaterial
  }
}

export function Crane(props: ThreeElements["group"]) {
  const { nodes, materials } = useGLTF('/models/vehicles_crane.glb') as GLTFResult
  
  // Create refs for the rotation animation
  const craneTopRef = useRef<THREE.Group>(null)
  const rotationRef = useRef(0)
  const directionRef = useRef(1) // 1 for clockwise, -1 for counter-clockwise
  const rotationSpeed = .5 // Adjust speed as needed
  const maxRotation = MathUtils.degToRad(75) // 75 degrees in radians
  
  // Animation using useFrame
  useFrame((_, delta) => {
    if (!craneTopRef.current) return
    
    // Update rotation based on direction
    rotationRef.current += directionRef.current * rotationSpeed * delta
    
    // Check if we need to change direction
    if (Math.abs(rotationRef.current) >= maxRotation) {
      directionRef.current *= -1 // Reverse direction
      // Clamp the rotation to avoid overshooting
      rotationRef.current = Math.sign(rotationRef.current) * maxRotation
    }
    
    // Apply rotation to the top part of the crane
    craneTopRef.current.rotation.y = rotationRef.current
  })
  
  return (
    <group {...props} dispose={null}>
      <group>
        <group position={[101.909790, 2.666656, -101.998489]} rotation={[0, -0.931, 0]} scale={0.47}>
          <group position={[15, 0, -15]}>
            <group>
              <mesh
                castShadow
                receiveShadow
                geometry={nodes['crane-tower-base_1'].geometry}
                material={materials['17 GREY-DARKEST.009']}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={nodes['crane-tower-base_2'].geometry}
                material={materials['20 GREY.002']}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={nodes['crane-tower-base_3'].geometry}
                material={materials['29 ORANGE-LIGHT']}
              />
            </group>
            <group ref={craneTopRef}>
              <group position={[0, 57.91, 37.662]}>
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes['crane-tower-hook_1'].geometry}
                  material={materials['20 GREY.002']}
                />
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes['crane-tower-hook_2'].geometry}
                  material={materials['29 ORANGE-LIGHT']}
                />
              </group>
              <mesh
                castShadow
                receiveShadow
                geometry={nodes['crane-tower-slider'].geometry}
                material={materials['17 GREY-DARKEST.009']}
                position={[0, 59.436, 37.678]}
              />
              <group position={[0, 55.301, 0]}>
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes['crane-tower-top_1'].geometry}
                  material={materials['17 GREY-DARKEST.009']}
                />
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes['crane-tower-top_2'].geometry}
                  material={materials['21 GREY LIGHT.001']}
                />
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes['crane-tower-top_3'].geometry}
                  material={materials['29 ORANGE-LIGHT']}
                />
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes['crane-tower-top_4'].geometry}
                  material={materials['64 GLASS.002']}
                />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/vehicles_crane.glb')
