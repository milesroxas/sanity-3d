/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import type * as THREE from "three";
import React, { useMemo, useContext, createContext } from "react";
import { useGLTF, Merged } from "@react-three/drei";
import type { GLTF } from "three-stdlib";
import { ThreeElements } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    ["lamp-road-double"]: THREE.Mesh;
    ["lamp-road-double_1"]: THREE.Mesh;
    ["lamp-road-double_2"]: THREE.Mesh;
  };
  materials: {
    ["20 GREY.002"]: THREE.MeshPhysicalMaterial;
    Street_Lights: THREE.MeshStandardMaterial;
    ["21 GREY LIGHT.001"]: THREE.MeshPhysicalMaterial;
  };
};

interface DoubleStreetLightsInstances {
  Lamproaddouble: React.ComponentType<ThreeElements["mesh"]>;
  Lamproaddouble1: React.ComponentType<ThreeElements["mesh"]>;
  Lamproaddouble2: React.ComponentType<ThreeElements["mesh"]>;
}

const context = createContext<DoubleStreetLightsInstances | null>(null);

// Define position patterns that can be reused
const LIGHT_POSITIONS = [
  [47.485, 45.025],
  [74.943, 45.025],
  [-38.184, 75.171],
  [-10.725, 75.171],
  [104.326, 45.025],
  [134.464, 45.025],
  [164.975, 45.025],
];

export function Instances({
  children,
  ...props
}: {
  children: React.ReactNode;
}) {
  const { nodes } = useGLTF("/models/street-lights-double.glb") as GLTFResult;
  const instances = useMemo(
    () => ({
      Lamproaddouble: nodes["lamp-road-double"],
      Lamproaddouble1: nodes["lamp-road-double_1"],
      Lamproaddouble2: nodes["lamp-road-double_2"],
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances: DoubleStreetLightsInstances) => (
        <context.Provider value={instances}>{children}</context.Provider>
      )}
    </Merged>
  );
}

function StreetLight({
  position,
  rotation,
}: {
  position: [number, number, number];
  rotation: [number, number, number];
}) {
  const instances = useContext(context);

  if (!instances) {
    console.error("StreetLight must be used within an Instances component");
    return null;
  }

  return (
    <group position={position} rotation={rotation}>
      <instances.Lamproaddouble name="lamp-road-double" />
      <instances.Lamproaddouble1 name="lamp-road-double_1" />
      <instances.Lamproaddouble2 name="lamp-road-double_2" />
    </group>
  );
}

export function DoubleStreetLights(props: ThreeElements["group"]) {
  return (
    <Instances>
      <DoubleStreetLightsContent {...props} />
    </Instances>
  );
}

function DoubleStreetLightsContent(props: ThreeElements["group"]) {
  const lightPositions = useMemo(() => {
    return LIGHT_POSITIONS.map(([x, z]) => ({
      position: [x, 2.667, z] as [number, number, number],
      rotation: [0, Math.PI / 2, 0] as [number, number, number],
    }));
  }, []);

  return (
    <group {...props} dispose={null}>
      {lightPositions.map((lightProps, index) => (
        <StreetLight key={index} {...lightProps} />
      ))}
    </group>
  );
}

useGLTF.preload("/models/street-lights-double.glb");
