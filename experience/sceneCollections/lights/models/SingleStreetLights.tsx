/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import type { Mesh, MeshPhysicalMaterial, MeshStandardMaterial } from "three";
import React, { useMemo, useContext, createContext } from "react";
import { useGLTF, Merged } from "@react-three/drei";
import type { GLTF } from "three-stdlib";
import { ThreeElements } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    ["lamp-road"]: Mesh;
    ["lamp-road_1"]: Mesh;
    ["lamp-road_2"]: Mesh;
  };
  materials: {
    ["20 GREY.003"]: MeshPhysicalMaterial;
    ["59 EMISSION-WHITE"]: MeshStandardMaterial;
    ["58 WHITE.002"]: MeshPhysicalMaterial;
  };
};

interface SingleStreetLightsInstances {
  Lamproad: React.ComponentType<ThreeElements["mesh"]>;
  Lamproad1: React.ComponentType<ThreeElements["mesh"]>;
  Lamproad2: React.ComponentType<ThreeElements["mesh"]>;
}

const context = createContext<SingleStreetLightsInstances | null>(null);

// Define position patterns that can be reused
const LIGHT_POSITIONS = [
  { position: [99.5, -41.087], rotation: [0, 1.571, 0] },
  { position: [134.961, -41.087], rotation: [0, 1.571, 0] },
  { position: [168.798, -41.087], rotation: [0, 1.571, 0] },
  { position: [160.124, -49.016], rotation: [0, -Math.PI / 2, 0] },
  { position: [138.19, -49.016], rotation: [0, -Math.PI / 2, 0] },
  { position: [91.126, -49.016], rotation: [0, -Math.PI / 2, 0] },
  { position: [105.465, -48.519], rotation: [0, -Math.PI / 2, 0] },
  { position: [64.229, -59.077], rotation: [Math.PI, 0, Math.PI] },
  { position: [64.229, -84.928], rotation: [Math.PI, 0, Math.PI] },
  { position: [55.484, -100.762], rotation: [0, 0, 0] },
  { position: [56.091, -72.83], rotation: [0, 0, 0] },
  { position: [33.958, 3.417], rotation: [Math.PI, 0, Math.PI] },
  { position: [33.958, 25.548], rotation: [Math.PI, 0, Math.PI] },
  { position: [25.852, 14.592], rotation: [0, 0, 0] },
  { position: [-24.432, -19.024], rotation: [0, -Math.PI / 2, 0] },
  { position: [-2.301, -19.024], rotation: [0, -Math.PI / 2, 0] },
  { position: [-13.257, -10.918], rotation: [0, 1.571, 0] },
  { position: [-46.344, -19.024], rotation: [0, -Math.PI / 2, 0] },
  { position: [-35.168, -10.918], rotation: [0, 1.571, 0] },
  { position: [19.561, -19.024], rotation: [0, -Math.PI / 2, 0] },
  { position: [8.605, -10.918], rotation: [0, 1.571, 0] },
  { position: [-55.615, -49.226], rotation: [Math.PI, 0, Math.PI] },
  { position: [-55.615, -75.077], rotation: [Math.PI, 0, Math.PI] },
  { position: [-64.36, -90.911], rotation: [0, 0, 0] },
  { position: [-63.753, -62.98], rotation: [0, 0, 0] },
  { position: [-55.615, -26.17], rotation: [Math.PI, 0, Math.PI] },
  { position: [-63.753, -39.923], rotation: [0, 0, 0] },
  { position: [-55.615, 25.727], rotation: [Math.PI, 0, Math.PI] },
  { position: [-63.753, 35.031], rotation: [0, 0, 0] },
  { position: [-55.615, 46.086], rotation: [Math.PI, 0, Math.PI] },
  { position: [-63.753, 55.389], rotation: [0, 0, 0] },
  { position: [123.874, 8.964], rotation: [Math.PI, 0, Math.PI] },
  { position: [123.874, 31.096], rotation: [Math.PI, 0, Math.PI] },
  { position: [115.767, 20.14], rotation: [0, 0, 0] },
  { position: [123.874, -29.896], rotation: [Math.PI, 0, Math.PI] },
  { position: [123.874, -7.765], rotation: [Math.PI, 0, Math.PI] },
  { position: [115.767, -18.72], rotation: [0, 0, 0] },
  { position: [115.767, -0.535], rotation: [0, 0, 0] },
  { position: [-33.836, 124.161], rotation: [0, 0, 0] },
  { position: [-33.836, 107.997], rotation: [0, 0, 0] },
  { position: [-33.836, 90.776], rotation: [0, 0, 0] },
  { position: [-26.094, 99.933], rotation: [Math.PI, 0, Math.PI] },
  { position: [-26.094, 117.154], rotation: [Math.PI, 0, Math.PI] },
  { position: [55.259, 101.158], rotation: [0, -Math.PI / 2, 0] },
  { position: [44.523, 109.264], rotation: [0, 1.571, 0] },
  { position: [82.384, 101.158], rotation: [0, -Math.PI / 2, 0] },
  { position: [71.648, 109.264], rotation: [0, 1.571, 0] },
  { position: [112.699, 101.158], rotation: [0, -Math.PI / 2, 0] },
  { position: [101.963, 109.264], rotation: [0, 1.571, 0] },
  { position: [144.367, 101.158], rotation: [0, -Math.PI / 2, 0] },
  { position: [133.632, 109.264], rotation: [0, 1.571, 0] },
];

export function Instances({
  children,
  ...props
}: {
  children: React.ReactNode;
}) {
  const { nodes } = useGLTF("/models/street-lights-single.glb") as GLTFResult;

  // Create a new emissive material
  const emissiveMaterial = useMemo(() => {
    const material = new THREE.MeshStandardMaterial();
    material.emissive.set("#ffff80"); // Warm white color
    material.emissiveIntensity = 50;
    return material;
  }, []);

  const instances = useMemo(
    () => ({
      Lamproad: nodes["lamp-road"],
      Lamproad1: { ...nodes["lamp-road_1"], material: emissiveMaterial },
      Lamproad2: nodes["lamp-road_2"],
    }),
    [nodes, emissiveMaterial]
  );

  return (
    <Merged meshes={instances} {...props}>
      {(instances: SingleStreetLightsInstances) => (
        <context.Provider value={instances}>{children}</context.Provider>
      )}
    </Merged>
  );
}

function StreetLight({
  position,
  rotation,
}: {
  position: [number, number, number];
  rotation: [number, number, number];
}) {
  const instances = useContext(context);

  if (!instances) {
    console.error("StreetLight must be used within an Instances component");
    return null;
  }

  return (
    <group position={position} rotation={rotation}>
      <instances.Lamproad />
      <instances.Lamproad1 />
      <instances.Lamproad2 />
    </group>
  );
}

export function SingleStreetLights(props: ThreeElements["group"]) {
  return (
    <Instances>
      <SingleStreetLightsContent {...props} />
    </Instances>
  );
}

function SingleStreetLightsContent(props: ThreeElements["group"]) {
  const lightPositions = useMemo(() => {
    return LIGHT_POSITIONS.map(({ position: [x, z], rotation }) => ({
      position: [x, 2.667, z] as [number, number, number],
      rotation: rotation as [number, number, number],
    }));
  }, []);

  return (
    <group {...props} dispose={null}>
      {lightPositions.map((lightProps, index) => (
        <StreetLight key={`light-${index}`} {...lightProps} />
      ))}
    </group>
  );
}

useGLTF.preload("/models/street-lights-single.glb");
