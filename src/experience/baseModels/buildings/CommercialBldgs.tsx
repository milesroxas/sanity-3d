/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

// Define types for the GLTF result
type GLTFResult = GLTF & {
  nodes: {
    ['building-shops_1']: THREE.Mesh;
    ['building-shops_2']: THREE.Mesh;
    ['building-shops_3']: THREE.Mesh;
    ['building-shops_4']: THREE.Mesh;
    ['building-shops_5']: THREE.Mesh;
    ['building-shops_6']: THREE.Mesh;
    ['building-shops_7']: THREE.Mesh;
    ['building-shops_8']: THREE.Mesh;
    ['building-shops_9']: THREE.Mesh;
    ['building-apartments_1']: THREE.Mesh;
    ['building-apartments_2']: THREE.Mesh;
    ['building-apartments_3']: THREE.Mesh;
    ['building-apartments_4']: THREE.Mesh;
    ['building-apartments_5']: THREE.Mesh;
    ['building-apartments_6']: THREE.Mesh;
    ['building-restaurant_1']: THREE.Mesh;
    ['building-restaurant_2']: THREE.Mesh;
    ['building-restaurant_3']: THREE.Mesh;
    ['building-restaurant_4']: THREE.Mesh;
    ['building-restaurant_5']: THREE.Mesh;
    ['building-restaurant_6']: THREE.Mesh;
    ['building-restaurant_7']: THREE.Mesh;
    ['building-restaurant_8']: THREE.Mesh;
    ['building-restaurant_9']: THREE.Mesh;
    ['building-restaurant_10']: THREE.Mesh;
    ['building-post_1']: THREE.Mesh;
    ['building-post_2']: THREE.Mesh;
    ['building-post_3']: THREE.Mesh;
    ['building-post_4']: THREE.Mesh;
    ['building-post_5']: THREE.Mesh;
    ['building-post_6']: THREE.Mesh;
    ['building-museum_1']: THREE.Mesh;
    ['building-museum_2']: THREE.Mesh;
    ['building-museum_3']: THREE.Mesh;
    ['building-museum_4']: THREE.Mesh;
    ['building-museum_5']: THREE.Mesh;
    ['building-museum_6']: THREE.Mesh;
  };
  materials: {
    // Original material names
    ['5 SKIN-LIGHT.002']: THREE.MeshPhysicalMaterial;
    ['10 BROWN-DARK.001']: THREE.MeshPhysicalMaterial;
    ['17 GREY-DARKEST.014']: THREE.MeshPhysicalMaterial;
    ['20 GREY.010']: THREE.MeshPhysicalMaterial;
    ['21 GREY LIGHT.007']: THREE.MeshPhysicalMaterial;
    ['23 GREY-WHITE.009']: THREE.MeshPhysicalMaterial;
    ['58 WHITE.009']: THREE.MeshPhysicalMaterial;
    ['61 EMISSION-ORANGE.004']: THREE.MeshStandardMaterial;
    ['64 GLASS.012']: THREE.MeshPhysicalMaterial;
    ['53 PINK-LIGHT']: THREE.MeshStandardMaterial;
    ['17 GREY-DARKEST']: THREE.MeshPhysicalMaterial;
    ['12 BROWN']: THREE.MeshPhysicalMaterial;
    ['58 WHITE']: THREE.MeshPhysicalMaterial;
    ['10 BROWN-DARK']: THREE.MeshPhysicalMaterial;
    ['64 GLASS']: THREE.MeshPhysicalMaterial;
    ['26 RED-DARK']: THREE.MeshPhysicalMaterial;
    ['20 GREY']: THREE.MeshPhysicalMaterial;
    ['61 EMISSION-ORANGE']: THREE.MeshStandardMaterial;
    ['21 GREY LIGHT']: THREE.MeshPhysicalMaterial;
    ['15 BROWN-WHITE']: THREE.MeshPhysicalMaterial;
    ['5 SKIN-LIGHT']: THREE.MeshPhysicalMaterial;
    ['9 BROWN-DARKEST']: THREE.MeshPhysicalMaterial;
    ['42 BLUE-DARK']: THREE.MeshPhysicalMaterial;
    ['41 BLUE-DARKEST']: THREE.MeshPhysicalMaterial;
    ['14 BROWN-LIGHTEST']: THREE.MeshPhysicalMaterial;
  };
};

// Props for individual buildings
interface BuildingProps {
  position?: [number, number, number];
  rotation?: [number, number, number];
  scale?: number | [number, number, number];
  nodes: GLTFResult['nodes'];
  materials: GLTFResult['materials'];
}

// Preload the model
useGLTF.preload('/models/commercial_buildings.glb');

// Individual building components
export function ShopsBuilding({
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = 1,
  nodes,
  materials,
}: BuildingProps) {
  return (
    <group
      position={new THREE.Vector3(...position)}
      rotation={new THREE.Euler(...rotation)}
      scale={scale}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-shops_1'].geometry}
        material={materials['5 SKIN-LIGHT.002']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-shops_2'].geometry}
        material={materials['10 BROWN-DARK.001']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-shops_3'].geometry}
        material={materials['17 GREY-DARKEST.014']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-shops_4'].geometry}
        material={materials['20 GREY.010']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-shops_5'].geometry}
        material={materials['21 GREY LIGHT.007']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-shops_6'].geometry}
        material={materials['23 GREY-WHITE.009']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-shops_7'].geometry}
        material={materials['58 WHITE.009']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-shops_8'].geometry}
        material={materials['61 EMISSION-ORANGE.004']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-shops_9'].geometry}
        material={materials['64 GLASS.012']}
      />
    </group>
  );
}

export function ApartmentsBuilding({
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = 1,
  nodes,
  materials,
}: BuildingProps) {
  return (
    <group
      position={new THREE.Vector3(...position)}
      rotation={new THREE.Euler(...rotation)}
      scale={scale}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-apartments_1'].geometry}
        material={materials['53 PINK-LIGHT']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-apartments_2'].geometry}
        material={materials['17 GREY-DARKEST']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-apartments_3'].geometry}
        material={materials['12 BROWN']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-apartments_4'].geometry}
        material={materials['58 WHITE']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-apartments_5'].geometry}
        material={materials['10 BROWN-DARK']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-apartments_6'].geometry}
        material={materials['64 GLASS']}
      />
    </group>
  );
}

export function RestaurantBuilding({
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = 1,
  nodes,
  materials,
}: BuildingProps) {
  return (
    <group
      position={new THREE.Vector3(...position)}
      rotation={new THREE.Euler(...rotation)}
      scale={scale}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-restaurant_1'].geometry}
        material={materials['17 GREY-DARKEST']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-restaurant_2'].geometry}
        material={materials['26 RED-DARK']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-restaurant_3'].geometry}
        material={materials['64 GLASS']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-restaurant_4'].geometry}
        material={materials['20 GREY']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-restaurant_5'].geometry}
        material={materials['61 EMISSION-ORANGE']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-restaurant_6'].geometry}
        material={materials['21 GREY LIGHT']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-restaurant_7'].geometry}
        material={materials['58 WHITE']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-restaurant_8'].geometry}
        material={materials['15 BROWN-WHITE']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-restaurant_9'].geometry}
        material={materials['5 SKIN-LIGHT']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-restaurant_10'].geometry}
        material={materials['9 BROWN-DARKEST']}
      />
    </group>
  );
}

export function PostBuilding({
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = 1,
  nodes,
  materials,
}: BuildingProps) {
  return (
    <group
      position={new THREE.Vector3(...position)}
      rotation={new THREE.Euler(...rotation)}
      scale={scale}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-post_1'].geometry}
        material={materials['42 BLUE-DARK']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-post_2'].geometry}
        material={materials['58 WHITE']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-post_3'].geometry}
        material={materials['17 GREY-DARKEST']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-post_4'].geometry}
        material={materials['64 GLASS']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-post_5'].geometry}
        material={materials['20 GREY']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-post_6'].geometry}
        material={materials['21 GREY LIGHT']}
      />
    </group>
  );
}

export function MuseumBuilding({
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = 1,
  nodes,
  materials,
}: BuildingProps) {
  return (
    <group
      position={new THREE.Vector3(...position)}
      rotation={new THREE.Euler(...rotation)}
      scale={scale}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-museum_1'].geometry}
        material={materials['21 GREY LIGHT']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-museum_2'].geometry}
        material={materials['41 BLUE-DARKEST']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-museum_3'].geometry}
        material={materials['14 BROWN-LIGHTEST']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-museum_4'].geometry}
        material={materials['15 BROWN-WHITE']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-museum_5'].geometry}
        material={materials['9 BROWN-DARKEST']}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['building-museum_6'].geometry}
        material={materials['64 GLASS']}
      />
    </group>
  );
}

// Reusable hook to load GLTF
export function useCommercialBuildingsGLTF() {
  const { nodes, materials } = useGLTF('/models/commercial_buildings.glb') as unknown as GLTFResult;

  // Set shadow properties on all meshes
  Object.values(nodes).forEach((node: any) => {
    if (node.isMesh) {
      node.castShadow = true;
      node.receiveShadow = true;
    }
  });

  return { nodes, materials };
}

// Building instance data type
export interface BuildingInstanceData {
  type: 'shops' | 'apartments' | 'restaurant' | 'post' | 'museum';
  position: [number, number, number];
  rotation: [number, number, number];
  scale?: number | [number, number, number];
}
