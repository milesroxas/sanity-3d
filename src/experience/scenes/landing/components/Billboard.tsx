/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF, useVideoTexture } from '@react-three/drei';
import { useEffect, useMemo } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    platform_1: THREE.Mesh;
    platform_2: THREE.Mesh;
    billboard_1: THREE.Mesh;
    billboard_2: THREE.Mesh;
    post: THREE.Mesh;
  };
  materials: {
    black: THREE.MeshStandardMaterial;
    light: THREE.MeshStandardMaterial;
    TD_Checker: THREE.MeshStandardMaterial;
  };
};

export function Billboard() {
  const texture = useVideoTexture('/videos/intro-video-loop.mp4', {
    muted: true,
    loop: true,
    start: true,
  });

  texture.flipY = false;

  useEffect(() => {
    const video = texture.image as HTMLVideoElement;

    // Ensure video properties are set
    video.muted = true;
    video.loop = true;
    video.playsInline = true;

    // Try to play the video
    const playVideo = async () => {
      try {
        await video.play();
      } catch (error) {
        console.log('Video autoplay prevented:', error);
        // Add click listener to start video on user interaction
        const handleClick = async () => {
          try {
            await video.play();
            document.removeEventListener('click', handleClick);
          } catch (err) {
            console.log('Failed to play video on click:', err);
          }
        };
        document.addEventListener('click', handleClick);
      }
    };

    if (video.readyState >= 2) {
      playVideo();
    } else {
      video.addEventListener('loadeddata', playVideo);
    }

    return () => {
      video.removeEventListener('loadeddata', playVideo);
    };
  }, [texture]);

  const { nodes, materials } = useGLTF('/models/landing/billboard.glb') as unknown as GLTFResult;

  const billboardMaterial = useMemo(() => {
    return new THREE.MeshStandardMaterial({
      map: texture,
      toneMapped: false,
    });
  }, [texture]);

  return (
    <group dispose={null}>
      <group name="Scene002">
        <group
          name="platform"
          position={[9.328, 18.499, -7.336]}
          rotation={[0, 1.44, 0]}
          scale={0.056}
        >
          <mesh
            name="platform_1"
            castShadow
            receiveShadow
            geometry={nodes.platform_1.geometry}
            material={materials.black}
          />
          <mesh
            name="platform_2"
            castShadow
            receiveShadow
            geometry={nodes.platform_2.geometry}
            material={materials.light}
          />
        </group>
        <group
          name="billboard"
          position={[12.201, 23.171, -9.868]}
          rotation={[Math.PI / 2, 0, 0.131]}
        >
          <mesh
            name="billboard_1"
            castShadow
            receiveShadow
            geometry={nodes.billboard_1.geometry}
            material={materials.black}
          />
          <mesh
            name="billboard_2"
            castShadow
            receiveShadow
            geometry={nodes.billboard_2.geometry}
            material={billboardMaterial}
          />
        </group>
        <mesh
          name="post"
          castShadow
          receiveShadow
          geometry={nodes.post.geometry}
          material={materials.black}
          position={[20.323, 9.98, -10.09]}
          rotation={[0, -0.131, 0]}
          scale={[1.292, 4.799, 1.022]}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/models/landing/billboard.glb');
